export function Exercise2() {

    //1.T·∫°o 1 m·∫£ng s·ªë nguy√™n, in ra danh s√°ch list
    const numbers = [1, 12, -3, 4, 15, 20, -10, 8, 7, 6];

    //2.t√≠nh t·ªïng
    const sum = numbers.reduce((acc, curr) => acc + curr, 0);
   
   //3.T√≠nh trung b√¨nh
   const average = sum / numbers.length;

    //4. Khai m·∫£ng chu·ªói names, in ra danh s√°ch c√°c t√™n, theo th·ª© t·ª± tƒÉng d·∫ßn Alphabet
    const names = ['An', 'B√¨nh', 'C∆∞·ªùng', 'D≈©ng', 'H√†', 
        'H√πng', 'Minh', 'Nam', 'Qu√¢n', 'Tu·∫•n'];
        names.sort(); // S·∫Øp x·∫øp m·∫£ng names theo th·ª© t·ª± tƒÉng d·∫ßn
    
        const students = [
            {id: 1, name: 'An', age: 20, grade: 8.5},
            {id: 2, name: 'B√¨nh', age: 22, grade: 7.0},
            {id: 3, name: 'C∆∞·ªùng', age: 21, grade: 9.0},
            {id: 4, name: 'D≈©ng', age: 23, grade: 6.5},
            {id: 5, name: 'H√†', age: 20, grade: 8.0},
            {id: 6, name: 'H√πng', age: 22, grade: 7.5},
            {id: 7, name: 'Minh', age: 21, grade: 9.5},
            {id: 8, name: 'Nam', age: 23, grade: 6.0},
            {id: 9, name: 'Qu√¢n', age: 20, grade: 8.8},
            {id: 10, name: 'Tu·∫•n', age: 22, grade: 7.8},
        ];

        //In danh s√°ch h·ªçc sinh c√≥ ƒëi·ªÉm >= 7.5, s·∫Øp x·∫øp theo grade gi·∫£m d·∫ßn
        const topStudents = students
        .filter(student => student.grade >= 7.5)
        .sort((a, b) => b.grade - a.grade);
        
        
    return (
        <div>
           <h2>Exercise 2</h2>
        <p>K·∫øt qu·∫£ sum(1,2,3,4,5): {sum}</p>
        <ul>
            {numbers.map((num, index) => (
                <li key={index}> Ph·∫ßn t·ª≠ th·ª© {index}-{num}</li>
            ))}
        </ul>
        <p>T·ªïng c√°c ph·∫ßn t·ª≠ c·ªßa m·∫£ng: {sum}</p>
        <p>Gi√° tr·ªã Trung b√¨nh: {average.toFixed(2)}</p>
        <p>S·∫Øp x·∫øp t√™n theo b·∫£ng ch·ªØ c√°i Alphabet:</p>
        <ul>
            {names.map((name, i) =>
                <li key={i}> {name}</li>
            )}
        </ul>
        <p>Hi·ªÉn th·ªã danh s√°ch topStudents d∆∞·ªõi d·∫°ng b·∫£ng</p>
        <table border="1" cellPadding="5">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Age</th>
                    <th>Grade</th>
                </tr>
            </thead>
            <tbody>
                {topStudents.map(student => (
                    <tr key={student.id}>
                        <td>{student.id}</td>
                        <td>{student.name}</td>
                        <td>{student.age}</td>
                        <td>{student.grade}</td>
                        {student.grade >= 9 && <td style={{ color: 'green' }}>üëç</td>}
                    </tr>
                ))}
                <tr>
                    <td colSpan="3">ƒêi·ªÉm trung b√¨nh</td>
                    <td>{(topStudents.reduce((acc, curr) => acc + curr.grade, 0) / topStudents.length).toFixed(2)}</td>
                </tr>
            </tbody>
        </table>
    </div>
    )
}